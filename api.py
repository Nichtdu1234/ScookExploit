from other import getjson, ReadTime
from threading import Thread

class User:
    def __init__(self, student):
        self.name = student["first_name"] + ' ' + student["last_name"]
        self.username = student["username"]
        self.ip = student["last_sign_in_ip"]
        self.email = student["email"]
        self.parents_email = student["parents_email"]
        self.birthday = student["data"]["date_of_birth"]
        self.gender = student["data"]["gender"]
        self.role = student["role"]
        self.avatar = student["avatar"]["url"]
        self.last_sign_in = student["last_sign_in_at"]
        self.Assignments = []

    def AddAssignment(self, student, assignmenttitle):
        self.Assignments.append({
            "title": assignmenttitle,
            "state": student["state"],
            "score": student["score"],
            "corrections": student["correct_activities"]})

    def __repr__(self):
        string = ["\nName: " + self.name,
                  "Username: " + self.username,
                  "IP: " + self.ip,
                  "Email: " + self.email]
        if self.parents_email is not None: string.append("Parents Email: " + self.parents_email)
        string.append("Birthday: " + ReadTime(self.birthday))
        string.append("Gender: " + self.gender)
        string.append("Role: " + self.role)
        if self.avatar != "/user1.png": string.append("Profile Picture: " + self.avatar)
        string.append("Last sign in: " + ReadTime(self.last_sign_in))
        for assignment in self.Assignments: string.append("\nAssignment: " + assignment["title"] + "\nState: " + assignment["state"] + "\nScore: " + str(assignment["score"]) + "%\nCorrection Attempts: " + str(assignment["corrections"]))
        return '\n'.join(string)

class Task:
    def __init__(self, assignment, student_id):
        self.id = assignment["id"]
        self.student_id = student_id
        self.title = assignment["title"]
        self.days_left = assignment["days_left"]
        self.Students = []

        for student in assignment["students"]:
            self.Students.append({
                "name": student["student"]["first_name"] + ' ' + student["student"]["last_name"],
                "state": student["state"],
                "score": student["score"],
                "corrections": student["correct_activities"]})

    def __repr__(self):
        string = ["\nTitle: " + self.title,
                  "Days Left: " + str(self.days_left)]
        for student in self.Students: string.append("\nName: " + student["name"] + "\nState: " + student["state"] + "\nScore: " + str(student["score"]) + "%\nCorrections: " + str(student["corrections"]))
        return '\n'.join(string)

class session:
    def __init__(self, unity_session):
        self.UnitySession = unity_session  # might delete if i wont use it anymore
        self.headers = {"cookie": "_unity_web_session=" + unity_session}

        self.ids = []
        self.student_ids = []
        self.teachers = {}
        self.students = {}
        self.tasks = {}

        # Assignment ids
        assignments = getjson("https://www.scook.at/api/assignments.json", self.headers)

        Return = []
        for assignment in assignments:
            self.ids.append(assignment["id"])
            self.student_ids.append(assignment["assignment_student_id"])

        # Users
        user = getjson("https://www.scook.at/components/messages/classes_users_switch", self.headers)
        for t in user["teachers"]: self.teachers[(t["user"]["first_name"] + ' ' + t["user"]["last_name"]).lower()] = User(t["user"])
        for s in user["students"]: self.students[(s["user"]["first_name"] + ' ' + s["user"]["last_name"]).lower()] = User(s["user"])

        # Assignments
        raw_assignments = {}
        def GetAssignment(assignment_id):
            assignment = getjson("https://www.scook.at/api/assignment/" + assignment_id + ".json", self.headers)
            raw_assignments[assignment["title"].lower()] = assignment
        threads = []
        for thread in range(0, len(self.ids)):
            threads.append(Thread(target=GetAssignment, args=(self.ids[thread],), daemon=True))
            threads[-1].start()
        for thread in threads: thread.join()

        for a in raw_assignments:
            self.tasks[raw_assignments[a]["title"].lower()] = Task(raw_assignments[a], self.student_ids[self.ids.index(raw_assignments[a]["id"])])
            for s in raw_assignments[a]["students"]:
                try: self.students[(s["student"]["first_name"] + ' ' + s["student"]["last_name"]).lower()].AddAssignment(s, raw_assignments[a]["title"])
                except KeyError: pass

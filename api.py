import requests

assignments = []

def init(UnitySession):
    global headers
    headers = {"cookie": "_unity_web_session=" + UnitySession}


class Student:
    def __init__(self, student, assignmenttitle):
        self.id = student["student"]["id"]
        self.name = student["student"]["full_name"]
        self.email = student["student"]["email"]
        self.LastSignIn = student["student"]["last_sign_in_at"]
        self.avatar = student["student"]["avatar"]

        self.Assignments = {
            assignmenttitle: {
                "title": assignmenttitle,
                "assignmentid": student["id"],
                "state": student["state"],
                "score": student["score"],
                "corrections": student["correct_activities"]
            }
        }

    def addAsignmentInfo(self, student, assignmenttitle):
        self.Assignments[assignmenttitle] = {
            "title": assignmenttitle,
            "assignmentid": student["id"],
            "state": student["state"],
            "score": student["score"],
            "corrections": student["correct_activities"]
        }

    def __repr__(self):
        String = "id: " + self.id + '\n'
        String += "name: " + self.name + '\n'
        String += "email address: " + self.email + '\n'
        String += "last login: " + ReadTime(self.LastSignIn) + '\n'
        if self.avatar != "/user1.png": String += "custom avatar: " + self.avatar + '\n'

        for i in self.Assignments:
            String += "\nassignment: " + self.Assignments[i]["title"] + '\n'
            String += "assignment student id: " + self.Assignments[i]["assignmentid"] + '\n'
            String += "state: " + self.Assignments[i]["state"] + '\n'
            String += "score: " + str(self.Assignments[i]["score"]) + "%\n"
            if self.Assignments[i]["corrections"] is None: String += "corrections: 0\n"
            String += "corrections: " + str(self.Assignments[i]["corrections"]) + '\n'
        return String + "\n\n"


class Task:
    def __init__(self, task):
        self.id = task["id"]
        self.title = task["title"]
        self.daysleft = task["days_left"]

        self.students = {}

        for student in task["students"]:
            self.students[student["student"]["full_name"]] = {
                "name": student["student"]["full_name"],
                "assignmentid": student["student"]["id"],
                "state": student["state"],
                "score": student["score"],
                "corrections": student["correct_activities"]
            }
            
    def __repr__(self):
        String = "id: " + self.id + '\n'
        String += "title: " + self.title + '\n'
        String += "due: " + str(self.daysleft) + " days\n"

        for student in self.students:
            String += "\nname: " + self.students[student]["name"] + '\n'
            String += "assignment student id: " + self.students[student]["assignmentid"] + '\n'
            String += "state: " + self.students[student]["state"] + '\n'
            String += "score: " + str(self.students[student]["score"]) + "%\n"
            if self.students[student]["corrections"] is None: String += "corrections: 0\n"
            else: String += "corrections: " + str(self.students[student]["corrections"]) + '\n'

        return String + "\n\n"


def AssignmentIds():
    assignments = requests.get("https://www.scook.at/api/assignments.json", headers=headers).json()
    assignmentids = []
    for assignment in assignments:
        assignmentids.append(assignment["id"])
    return assignmentids

def GetStudents(assignmentids):
    global assignments
    students = {}

    if assignments == []:
        print("Going trough every assignment. This may take a while.")
        for AId in assignmentids:
            assignments.append(requests.get("https://www.scook.at/api/assignment/" + AId, headers=headers).json())
            print("downloaded")

    for assignment in assignments:
        title = assignment["title"]
        rawstudents = assignment["students"]

        for rawstudent in rawstudents:
            if rawstudent["student"]["full_name"].lower() in students: students[rawstudent["student"]["full_name"].lower()].addAsignmentInfo(rawstudent, title)
            else: students[rawstudent["student"]["full_name"].lower()] = Student(rawstudent, title)

    return students

def GetTasks(assignmentids):
    global assignments
    tasks = {}

    if assignments == []:
        print("Going trough every assignment. This may take a while.")
        for AId in assignmentids:
            assignments.append(requests.get("https://www.scook.at/api/assignment/" + AId, headers=headers).json())
            print("downloaded")

    for task in assignments:
        tasks[task["title"].lower()] = Task(task)

    return tasks


def ReadTime(time):
    uh = time.split("T")[0].split("-")
    lh = time.split("T")[1].split(":")
    return uh[2] + "." + uh[1] + ". " + uh[0] + " " + lh[0] + ":" + lh[1]

